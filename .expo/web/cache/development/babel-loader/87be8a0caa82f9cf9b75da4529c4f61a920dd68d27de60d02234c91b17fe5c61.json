{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { AsyncStorage } from \"react-native-web/dist/index\";\nimport { useNavigation } from '@react-navigation/native';\nimport utf8 from 'utf8';\nimport base64 from 'base-64';\nvar Login = function Login() {\n  var navigation = useNavigation();\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    username = _useState2[0],\n    setUsername = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    password = _useState4[0],\n    setPassword = _useState4[1];\n  useEffect(function () {\n    var unsubscribe = navigation.addListener('beforeRemove', function () {\n      AsyncStorage.removeItem('Credenciais');\n    });\n    return unsubscribe;\n  }, []);\n  var loadStoredCredentials = function () {\n    var _ref = _asyncToGenerator(function* () {\n      try {\n        var storedData = yield AsyncStorage.getItem('Credenciais');\n        if (storedData) {\n          var parsedData = JSON.parse(storedData);\n          setUsername(parsedData.username || '');\n          setPassword(parsedData.password || '');\n        }\n      } catch (error) {\n        console.error(\"Erro ao carregar credenciais salvas:\", error);\n      }\n    });\n    return function loadStoredCredentials() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var saveNewCredentials = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        var newCredentials = {\n          username: username,\n          password: password\n        };\n        yield AsyncStorage.setItem('Credenciais', JSON.stringify(newCredentials));\n        Alert.alert('Sucesso', 'Novas credenciais salvas com sucesso!');\n      } catch (error) {\n        Alert.alert('Erro', 'Falha ao salvar novas credenciais.');\n      }\n    });\n    return function saveNewCredentials() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var handleLogin = function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      var texto = `${username}:${password}`;\n      var bytes = utf8.encode(texto);\n      var encoded = base64.encode(bytes);\n      console.log('token ' + encoded);\n      try {\n        var response = yield fetch('http://ti.ararangua.sc.gov.br:10000/glpi/apirest.php/initSession', {\n          method: \"GET\",\n          headers: {\n            'App-Token': 'D8lhQKHjvcfLNrqluCoeZXFvZptmDDAGhWl17V2R',\n            'Authorization': 'Basic ' + encoded\n          }\n        });\n        var json = yield response.json();\n        console.log(json);\n        if (!username || !password) {\n          Alert.alert('Erro', 'Preencha todos os campos');\n          return;\n        }\n        if (json && json[0] === 'ERROR_GLPI_LOGIN') {\n          Alert.alert('Erro', 'Nome de usuário ou senha inválidos. Tente novamente.');\n        } else {\n          yield AsyncStorage.setItem('Credenciais', JSON.stringify({\n            username: username,\n            password: password\n          }));\n          navigation.navigate('Serviços');\n        }\n      } catch (error) {\n        console.error(error);\n        Alert.alert('Erro', 'Falha ao autenticar. Verifique suas credenciais e tente novamente.');\n      }\n    });\n    return function handleLogin() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  return null;\n};\nglobal.Login = Login;","map":{"version":3,"names":["React","useState","useEffect","Alert","AsyncStorage","useNavigation","utf8","base64","Login","navigation","_useState","_useState2","_slicedToArray","username","setUsername","_useState3","_useState4","password","setPassword","unsubscribe","addListener","removeItem","loadStoredCredentials","_ref","_asyncToGenerator","storedData","getItem","parsedData","JSON","parse","error","console","apply","arguments","saveNewCredentials","_ref2","newCredentials","setItem","stringify","alert","handleLogin","_ref3","texto","bytes","encode","encoded","log","response","fetch","method","headers","json","navigate","global"],"sources":["/home/luigi/Documentos/Projeto/glpi-app-react/src/pages/Components/globals.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Alert, AsyncStorage } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport utf8 from 'utf8';\nimport base64 from 'base-64';\n\nconst Login = () => {\n    const navigation = useNavigation();\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n\n    useEffect(() => {\n        const unsubscribe = navigation.addListener('beforeRemove', () => {\n            AsyncStorage.removeItem('Credenciais');\n        });\n        return unsubscribe;\n    }, []);\n\n    const loadStoredCredentials = async () => {\n        try {\n            const storedData = await AsyncStorage.getItem('Credenciais');\n            if (storedData) {\n                const parsedData = JSON.parse(storedData);\n                setUsername(parsedData.username || '');\n                setPassword(parsedData.password || '');\n            }\n        } catch (error) {\n            console.error(\"Erro ao carregar credenciais salvas:\", error);\n        }\n    };\n\n    const saveNewCredentials = async () => {\n        try {\n            const newCredentials = { username, password };\n            await AsyncStorage.setItem('Credenciais', JSON.stringify(newCredentials));\n            Alert.alert('Sucesso', 'Novas credenciais salvas com sucesso!');\n        } catch (error) {\n            Alert.alert('Erro', 'Falha ao salvar novas credenciais.');\n        }\n    };\n\n    const handleLogin = async () => {\n        const texto = `${username}:${password}`;\n        const bytes = utf8.encode(texto);\n        const encoded = base64.encode(bytes);\n        console.log('token ' + encoded);\n\n        try {\n            const response = await fetch('http://ti.ararangua.sc.gov.br:10000/glpi/apirest.php/initSession', {\n                method: \"GET\",\n                headers: {\n                    'App-Token': 'D8lhQKHjvcfLNrqluCoeZXFvZptmDDAGhWl17V2R',\n                    'Authorization': 'Basic ' + encoded\n                },\n            });\n            const json = await response.json();\n            console.log(json);\n            if (!username || !password) {\n                Alert.alert('Erro', 'Preencha todos os campos');\n                return;\n            }\n            if (json && json[0] === 'ERROR_GLPI_LOGIN') {\n                Alert.alert('Erro', 'Nome de usuário ou senha inválidos. Tente novamente.');\n            } else {\n                await AsyncStorage.setItem('Credenciais', JSON.stringify({ username, password }));\n                navigation.navigate('Serviços');\n            }\n        } catch (error) {\n            console.error(error);\n            Alert.alert('Erro', 'Falha ao autenticar. Verifique suas credenciais e tente novamente.');\n        }\n    };\n\n    return null; // ou retorne o JSX do componente Login, dependendo de como você o utiliza\n};\n\n// Exportando o componente Login como uma variável global\nglobal.Login = Login;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}