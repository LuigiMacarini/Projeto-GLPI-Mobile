{"ast":null,"code":"","map":{"version":3,"names":[],"sources":["/home/luigi/Documentos/Projeto/glpi-app-react/src/pages/Login/index.js"],"sourcesContent":["/*import React, { useState } from \"react\";\nimport { View, Text, Image, StyleSheet, TouchableOpacity, TextInput, Alert } from \"react-native\";\nimport { useNavigation } from '@react-navigation/native'\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport logo from '../assets/logo.png'\nimport gear from '../assets/gear.png'\nimport utf8 from 'utf8'\nimport base64 from 'base-64'\n\nconst Login = () => {\n    const navigation = useNavigation();\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n\n    const handleLogin = async () => {\n        const texto = `${username}:${password}`;\n        const bytes = utf8.encode(texto);\n        const encoded = base64.encode(bytes);\n\n        try {\n            const response = await fetch('http://ti.ararangua.sc.gov.br:10000/glpi/apirest.php/initSession', {\n                method: \"GET\",\n                headers: {\n                    'App-Token': 'D8lhQKHjvcfLNrqluCoeZXFvZptmDDAGhWl17V2R',\n                    'Authorization': 'Basic ' + encoded\n                },\n            });\n\n            if (response.ok) {\n                const json = await response.json();\n                const sessionToken = json['session_token']; \n                await AsyncStorage.setItem('SessionToken', sessionToken);\n                navigation.navigate('Serviços');\n            } else {\n                Alert.alert('Erro', 'Nome de usuário ou senha inválidos. Tente novamente.');\n            }\n        } catch (error) {\n            console.error(error);\n            Alert.alert('Erro', 'Falha ao autenticar. Verifique suas credenciais e tente novamente.');\n        }\n    };\n    console.log(sessionToken)\n\n    return (\n        <>\n            <View style={styles.container}>\n                <View>\n                    <Image\n                        source={logo} style={styles.image} />\n                </View>\n            </View>\n            <View>\n                <Text style={styles.texto}>\n                    Usuário:\n                </Text>\n                <TextInput\n                    placeholder=\"Login...\"\n                    style={styles.input}\n                    onChangeText={setUsername}\n                    value={username}\n                />\n                <Text style={styles.bar}></Text>\n                <Text style={styles.texto}>\n                    Senha:\n                </Text>\n                <TextInput\n                    placeholder=\"Senha...\"\n                    style={styles.input}\n                    onChangeText={setPassword}\n                    value={password}\n                    secureTextEntry={true}\n                />\n                <Text style={styles.bar}></Text>\n\n                <TouchableOpacity style={styles.button} onPress={handleLogin}>\n                    <Text>Entrar</Text>\n                </TouchableOpacity>\n            </View>\n            <View>\n                <TouchableOpacity style={styles.gear} onPress={() => navigation.navigate('Servidores')}>\n                    <Image source={gear} style={styles.gear} />\n                </TouchableOpacity>\n            </View>\n        </>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        backgroundColor: \"#fff\",\n    },\n    image: {\n        margin: 8,\n        alignSelf: 'center'\n    },\n    texto: {\n        fontSize: 26,\n        marginLeft: 16,\n        padding: 16,\n        fontWeight: \"bold\",\n    },\n    bar: {\n        borderBottomWidth: 1,\n        borderBottomColor: \"#434343\",\n        width: \"85%\",\n        justifyContent: \"center\",\n        alignSelf: \"center\",\n        bottom: 20\n    },\n    input: {\n        fontSize: 16,\n        marginLeft: 16,\n        padding: 16,\n        width: \"90%\"\n    },\n    button: {\n        backgroundColor: \"#FFE382\",\n        padding: 16,\n        borderRadius: 6,\n        width: \"45%\",\n        alignSelf: \"center\",\n        alignItems: \"center\",\n        marginVertical: \"15%\",\n        shadowColor: \"#000\",\n        shadowOpacity: 0.23,\n        shadowRadius: 2.62,\n        elevation: 4,\n        shadowOffset: {\n            width: 0,\n            height: 2,\n        },\n    },\n    gear: {\n        width: 90,\n        height: 90,\n        alignSelf: \"flex-end\",\n        bottom: \"75%\"\n    },\n});\n\nexport default Login;\n\n\n/*import React, { useState, useEffect } from \"react\";\nimport { View, Text, Image, StyleSheet, TouchableOpacity, TextInput, Alert} from \"react-native\";\nimport { useNavigation } from '@react-navigation/native'\nimport * as Animatable from 'react-native-animatable'\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport logo from '../assets/logo.png'\nimport gear from '../assets/gear.png'\nimport utf8 from 'utf8'\nimport base64 from 'base-64'\n\nconst Login = () => {\n    const navigation = useNavigation();\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    \n\n    const loadStoredCredentials = async () => {\n        try {\n            const storedData = await AsyncStorage.getItem('Credenciais');\n            if (storedData) {\n                const parsedData = JSON.parse(storedData);\n                setUsername(parsedData.username || '');\n                setPassword(parsedData.password || '');\n            }\n        } catch (error) {\n            console.error(\"Erro ao carregar credenciais salvas:\", error);\n        }\n    };\n\n    const saveNewCredentials = async () => {\n        try {\n            const newCredentials = { username, password };\n            await AsyncStorage.setItem('Credenciais', JSON.stringify(newCredentials));\n            Alert.alert('Sucesso', 'Novas credenciais salvas com sucesso!');\n        } catch (error) {\n            Alert.alert('Erro', 'Falha ao salvar novas credenciais.');\n        }\n    };\n\n    const handleLogin = async () => {\n        const texto = `${username}:${password}`;\n        const bytes = utf8.encode(texto);\n        const encoded = base64.encode(bytes);\n        console.log('token ' + encoded);\n\n        try {\n            const response = await fetch('http://ti.ararangua.sc.gov.br:10000/glpi/apirest.php/initSession', {\n                method: \"GET\",\n                headers: {\n                    'App-Token': 'D8lhQKHjvcfLNrqluCoeZXFvZptmDDAGhWl17V2R',\n                    'Authorization': 'Basic ' + encoded\n                },\n            });\n            const json = await response.json();\n            console.log(json);\n            if (!username || !password) {\n                Alert.alert('Erro', 'Preencha todos os campos');\n                return;\n            }\n            if (json && json[0] === 'ERROR_GLPI_LOGIN') {\n                Alert.alert('Erro', 'Nome de usuário ou senha inválidos. Tente novamente.');\n            } else {\n                await AsyncStorage.setItem('Credenciais', JSON.stringify({ username, password }));\n                navigation.navigate('Serviços');\n                \n            }\n        } catch (error) {\n            console.error(error);\n            Alert.alert('Erro', 'Falha ao autenticar. Verifique suas credenciais e tente novamente.');\n        }\n        \n    };\n\n    return (\n        <>\n            <View style={estilos.container}>\n                <View>\n                    <Animatable.Image\n                        animation={\"flipInY\"}\n                        source={logo} style={estilos.image} />\n                </View>\n            </View>\n            <View>\n                <Text style={estilos.texto}>\n                    Usuário:\n                </Text>\n                <TextInput\n                    placeholder=\"Login...\"\n                    style={estilos.input}\n                    onChangeText={setUsername}\n                    value={username}\n                />\n                <Text style={estilos.bar}></Text>\n                <Text style={estilos.texto}>\n                    Senha:\n                </Text>\n                <TextInput\n                    placeholder=\"Senha...\"\n                    style={estilos.input}\n                    onChangeText={setPassword}\n                    value={password}\n                    secureTextEntry={true}\n                />\n                <Text style={estilos.bar}></Text>\n\n                <TouchableOpacity style={estilos.button} onPress={handleLogin}>\n                    <Text>Entrar</Text>\n                </TouchableOpacity>\n                <TouchableOpacity style={estilos.button} onPress={saveNewCredentials}>\n                    <Text>Salvar Novas Credenciais</Text>\n                </TouchableOpacity>\n            </View>\n            <View>\n                <TouchableOpacity style={estilos.gear} onPress={() => navigation.navigate('Servidores')}>\n                    <Image source={gear} style={estilos.gear} />\n                </TouchableOpacity>\n            </View>\n        </>\n    );\n}\n\nconst estilos = StyleSheet.create({\n    container: {\n        backgroundColor: \"#fff\",\n    },\n    image: {\n        margin: 8,\n        alignSelf: 'center'\n    },\n    texto: {\n        fontSize: 26,\n        marginLeft: 16,\n        padding: 16,\n        fontWeight: \"bold\",\n    },\n    bar: {\n        borderBottomWidth: 1,\n        borderBottomColor: \"#434343\",\n        width: \"85%\",\n        justifyContent: \"center\",\n        alignSelf: \"center\",\n        bottom: 20\n    },\n    input: {\n        fontSize: 16,\n        marginLeft: 16,\n        padding: 16,\n        width: \"90%\"\n    },\n    button: {\n        backgroundColor: \"#FFE382\",\n        padding: 16,\n        borderRadius: 6,\n        width: \"45%\",\n        alignSelf: \"center\",\n        alignItems: \"center\",\n        marginVertical: \"15%\",\n        shadowColor: \"#000\",\n        shadowOpacity: 0.23,\n        shadowRadius: 2.62,\n        elevation: 4,\n        shadowOffset: {\n            width: 0,\n            height: 2,\n        },\n    },\n    gear: {\n        width: 90,\n        height: 90,\n        alignSelf: \"flex-end\",\n        bottom: \"75%\"\n    },\n});\n\nexport default Login;*/\n"],"mappings":""},"metadata":{},"sourceType":"script","externalDependencies":[]}