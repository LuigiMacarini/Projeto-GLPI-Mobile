{"ast":null,"code":"","map":{"version":3,"names":[],"sources":["/home/luigi/Área de Trabalho/glpi-app-react/src/pages/Login/index.js"],"sourcesContent":["/*import React, { useState, useEffect } from \"react\";\nimport { View, Text, Image, StyleSheet, Pressable, TextInput, Alert } from \"react-native\";\nimport * as Animatable from 'react-native-animatable';\nimport { useNavigation } from '@react-navigation/native';\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport base64 from 'base-64';\nimport logo from '../assets/logo.png';\nimport gear from '../assets/gear.png';\nimport servers from \"../Components/servers\";\n\nconst Login = () => {\n    const navigation = useNavigation();\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [selectedOption, setSelectedOption] = useState('');\n    const [serverUrl, setServerUrl] = useState('');\n\n    const option = async (selected) => {\n        if (selected === 'TI') {\n            await AsyncStorage.setItem('User', 'TI');\n        } else if (selected === 'Banco Interno') {\n            await AsyncStorage.setItem('User', 'BC');\n        }\n    };\n\n    const clearSavedPages = async () => {\n        try {\n            await AsyncStorage.removeItem('Computer');\n            await AsyncStorage.removeItem('Ticket');\n            await AsyncStorage.removeItem('Printer');\n        } catch (error) {\n            console.error('Erro ao limpar os valores salvos:', error);\n        }\n    };\n    useEffect(() => {\n        const fetchServerUrl = async () => {\n            const url = await servers();\n            setServerUrl(url);\n        };\n        fetchServerUrl();\n    }, []);\n\n    useEffect(() => {\n        clearSavedPages();\n    }, []);\n\n    useEffect(() => {\n        option(selectedOption);\n    }, [selectedOption]);\n\n    const handleLogin = async () => {\n        if (!username || !password || !selectedOption) {\n            Alert.alert('Preencha todos os campos e selecione uma opção');\n            return;\n        }\n\n        const text = `${username}:${password}`;\n        const encoded = base64.encode(text);\n        await AsyncStorage.setItem('encoded', encoded);\n        //console.log(serverUrl)\n        //console.log(username)\n        try {\n            const res = await fetch(`${serverUrl}/initSession`, {\n                method: \"GET\",\n                headers: {\n                    'App-Token': 'D8lhQKHjvcfLNrqluCoeZXFvZptmDDAGhWl17V2R',\n                    'Authorization': 'Basic ' + encoded,\n                    'Session-Token': `${session_token}`\n                },\n            });\n\n            const json = await res.json();\n\n            if (json && json[0] === 'ERROR_GLPI_LOGIN') {\n                Alert.alert('Erro', 'Nome de usuário ou senha inválidos');\n            } else {\n                const sessionToken = json.session_token;\n                await AsyncStorage.setItem('username',username);\n                await AsyncStorage.setItem('sessionToken', JSON.stringify(json));\n                await AsyncStorage.setItem('Credenciais', JSON.stringify({ password,username }));\n                navigation.navigate('Serviços');\n            }\n        } catch (error) {\n            console.error(error);\n            Alert.alert('Erro', 'Falha ao autenticar. Verifique suas credenciais e tente novamente.');\n        }\n    };\n\n\n\n    return (\n        <>\n            <Animatable.View style={styles.containerHeader}>\n                <View>\n                    <Image\n                        animation={\"flipInY\"}\n                        source={logo} style={styles.image} />\n                </View>\n            </Animatable.View>\n\n            <View>\n                <View style={styles.containerLogin}>\n                    <Text style={styles.text}>\n                        Usuário:\n                    </Text>\n                    <TextInput\n                        placeholder=\"Login...\"\n                        style={styles.input}\n                        onChangeText={setUsername}\n                        value={username}\n                    />\n                    <Text style={styles.bar}></Text>\n                    <Text style={styles.text}>\n                        Senha:\n                    </Text>\n\n                    <TextInput\n                        placeholder=\"Senha...\"\n                        style={styles.input}\n                        onChangeText={setPassword}\n                        value={password}\n                        secureTextEntry={true}\n                    />\n                    <Text style={styles.bar}></Text>\n\n                    <View style={styles.optionsContainer}>\n                        <Pressable\n                            style={[styles.optionButton, selectedOption === 'TI' && styles.selectedOption]}\n                            onPress={() => setSelectedOption('TI')}>\n                            <Text style={styles.optionText}>TI</Text>\n                        </Pressable>\n                        <Pressable\n                            style={[styles.optionButton, selectedOption === 'Banco Interno' && styles.selectedOption]}\n                            onPress={() => setSelectedOption('Banco Interno')}>\n                            <Text style={styles.optionText}>Banco Interno</Text>\n                        </Pressable>\n                    </View>\n\n                    <Pressable style={styles.button} onPress={handleLogin}>\n                        <Text>Entrar</Text>\n                    </Pressable>\n\n                </View>\n                <View>\n                    <Pressable style={styles.gear} onPress={() => navigation.navigate('Servidores')}>\n                        <Image source={gear} style={styles.gear} />\n                    </Pressable>\n                </View>\n            </View>\n        </>\n    );\n};\n\nconst styles = StyleSheet.create({\n    containerHeader: {\n        backgroundColor: \"#fff\",\n    },\n    containerLogin: {\n        backgroundColor: \"#fff\",\n        height: '85%',\n        margin: 16,\n    },\n    image: {\n        margin: 8,\n        alignSelf: 'center'\n    },\n    text: {\n        fontSize: 26,\n        marginLeft: 16,\n        padding: 16,\n        fontWeight: \"bold\",\n    },\n    bar: {\n        borderBottomWidth: 1,\n        borderBottomColor: \"#434343\",\n        width: \"85%\",\n        justifyContent: \"center\",\n        alignSelf: \"center\",\n        bottom: 20\n    },\n    input: {\n        fontSize: 16,\n        marginLeft: 16,\n        padding: 16,\n        width: \"90%\"\n    },\n    button: {\n        backgroundColor: \"#FFE382\",\n        padding: 16,\n        borderRadius: 6,\n        width: \"45%\",\n        alignSelf: \"center\",\n        alignItems: \"center\",\n        marginVertical: \"5%\",\n        shadowColor: \"#000\",\n        shadowOpacity: 0.23,\n        shadowRadius: 2.62,\n        elevation: 4,\n        shadowOffset: {\n            width: 0,\n            height: 2,\n        },\n    },\n    gear: {\n        width: 90,\n        height: 90,\n        alignSelf: \"flex-end\",\n        bottom: \"75%\"\n    },\n    optionsContainer: {\n        flexDirection: 'row',\n        justifyContent: 'space-around',\n        marginVertical: 20,\n    },\n    optionButton: {\n        padding: 10,\n        borderWidth: 1,\n        borderColor: '#ccc',\n        borderRadius: 5,\n    },\n    selectedOption: {\n        backgroundColor: '#FFE382',\n    },\n    optionText: {\n        fontSize: 16,\n    },\n});\nexport default Login;\n*/"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}